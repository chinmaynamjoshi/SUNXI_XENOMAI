SOFTWARE REQUIREMENTS:

 - Download dependencies
   1. `apt-get install ncurses-dev uboot-mkimage build-essential git`
 - Download a cross compiler
   - Linaro's GNU GCC EABI Hard-Float
      1. Goto [linaro.org](http://www.linaro.org/downloads/) 
         and scroll down to the 'BINARIES' section and get the 
         latest 'linaro-toolchain-binaries' (Currently v4.7-2013.1)
      2. Create a directory somewhere for the compiler to live. 
         On Linux I put it in '~/linaro/'
      3. tar -xvjf gcc-linaro-arm-linux-gnueabihf-XXXXXXXXXX_linux.tar.bz2 ~/linaro/
         2 Ubuntu Repos (easiest)
      4. 'apt-get install gcc-4.6-arm-linux-gnueabi'
   - Add your cross compiler to your users PATH variable (Only needed for Linaro)
     1. '$ nano ~/.profile'  
        'PATH="$HOME/linaro/gcc-linaro-arm-linux-gnueabihf-XXXXXXXXXX/bin:$PATH"'
     2. LOGOUT AND BACK IN! your .profile is only loaded on login. 
        (source ~/.profile does NOT work!)
        

DEVELOPMENT NICETIES:

   - Download Eclipse
     1. Goto [Eclipse.org](http://www.eclipse.org/downloads/) and look 
        for the latest IDE for c/c++ Devlopers
     2. Create a directory for Eclipse to live. On linux I put it in '~/eclipse/'
     3. tar -xvf eclipse-cpp-juno-SR1-linux-gtk-x86_64.tar.gz ~/eclipse
   - Configure Eclipse
     1. Run Eclipse and goto 'Help -> Install New Software'
     2. Under 'Work With:' select 'Juno - http://download.eclipse.org/releases/juno'
     3. Enter 'Git' in the search box and select 'Eclipse EGit' & 
        'Eclipse EGit Mylyn GitHub Feature'
     4. Under 'File -> Import...' select 'Git -> Projects' or 'Repos'. 
        - If you choose a project you can select the folder where you downloaded 
        the repository and Eclipse will turn it into a project for you.
        - If you select 'Repo' then Search for repos written in C and for
        'SUNXI_XENOMAI' and Eclipse will checkout the project for you.
     5. Select 'Project -> Properties' select 'Builders' and then 'New...', 
        then 'Program' and name it 'Cross_Compile'.  
          Location: /usr/bin/make  
          Working Directory: (Select browse workspace and select ok)  
          Arguments: ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- uImage (Put in the compiler prefix you chose to install)   
          NOTE: If you dont know your compilers prefix type 'arm-' and press 'TAB' untill you fuss it out. If it brings up nothing
          then the compiler is not in the PATH variable.
    6. Now when you select 'Project -> Build Project' it will compile without complaints    


ALTERNATE BUILD DIRECTORY FOR THE KERNEL:

   When compiling the kernel all output files will per default be
   stored together with the kernel source code.
   Using the option "make O=output/dir" allow you to specify an alternate
   place for the output files (including .config).
   Example:
     kernel source code:	/usr/src/linux-3.N
     build directory:		/home/name/build/kernel

   To configure and build the kernel use:
   cd /usr/src/linux-3.N
   make O=/home/name/build/kernel menuconfig
   make O=/home/name/build/kernel
   sudo make O=/home/name/build/kernel modules_install install

   Please note: If the 'O=output/dir' option is used then it must be
   used for all invocations of make.


CONFIGURING THE KERNEL:

   Do not skip this step even if you are only upgrading one minor
   version.  New configuration options are added in each release, and
   odd problems will turn up if the configuration files are not set up
   as expected.

 - Alternate configuration commands are:
	"make menuconfig"  Text based color menus, radiolists & dialogs.
	"make xconfig"     X windows (Qt) based configuration tool.
	"make defconfig"   Create a ./.config file by using the default
			   symbol values from either arch/$ARCH/defconfig
			   or arch/$ARCH/configs/${PLATFORM}_defconfig,
			   depending on the architecture.


COMPILING THE KERNEL:

 - Make sure you have a cross compiler from the steps above available.

 - If this is a fresh repo then do a `make ARCH=arm a13-olinuxino_defconfig`
   to build a defualt .config file
   
 - If you want to modify thing s then `make ARCH=arm menuconf`
   
 - Do a `make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- uImage` 
   you can add -j# to speed up the compile

 - Create a temporary directory to hold your modules, say `~/Olinuxino_Modules`

 - `make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- INSTALL_MOD_PATH=~/Olinuxino_Modules modules`

 - `make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- INSTALL_MOD_PATH=~/Olinuxino_Modules modules_install`
  
   
INSTALLING IT ALL TOGETHER:

 - Format your SDCard: (use fdisk -l to find the card by capacity)
   1. `fdisk -u=sectors /dev/sdX`
   2. `p` if their are any partitions then delete them by `d 1`, `d 2`, etc
   3. `n p 1` Create primary partition 1 ( /boot )
   4. 'beginning 2048 end 34815'
   5. `n p 2` Create primary partition 2 ( / )
   6. `p` if you did everything correctly you should see something like:

		Disk /dev/sdX: 2001 MB, 2001731584 bytes
		42 heads, 41 sectors/track, 2270 cylinders, total 3909632 sectors
		Units = sectors of 1 * 512 = 512 bytes
		Sector size (logical/physical): 512 bytes / 512 bytes
		I/O size (minimum/optimal): 512 bytes / 512 bytes
		Disk identifier: 0Ã—00000000
		Device    Boot Start End     Blocks  Id System
		/dev/sdX1      2048  34815   16384   83 Linux
		/dev/sdX2      34816 3909631 1937408 83 Linux
   
   7. `w` Write changes to disk
   8. `mkfs.vfat /dev/sdX1`
   9. `mkfs.ext3 /dev/sdX2`

 - Download `http://hands.com/~lkcl/mele_debian_armhf_minimal.cpio.gz`
 - Download `https://github.com/OLIMEX/OLINUXINO/blob/master/SOFTWARE/A13/script.bin`
 
 - Mount your SDCard /boot partiton and copy the kernel over
   1. `sudo mkdir /mnt/SDCard`
   2. `sudo mount /dev/sdX1 /mnt/SDCard`
   3. Now copy your compiled kernel from `arch/arc/boot/uImage` to `/mnt/SDCard/`
   4. Copy `script.bin` to `/mnt/SDCard/`
  
 - Write uBoot to the /boot partiton
   1. `dd if=spl/sunxi-spl.bin of=/dev/sdX bs=1024 seek=8`
   2. `dd if=u-boot.bin of=/dev/sdX bs=1024 seek=32`
   3. `sync`
   4 `sudo umount /mnt/SDCard`
   
 - Copy over the root filesystem and kernel modules
   1. `sudo mount /dev/sdX2 /mnt/SDCard`
   2. `cd /mnt/SDCard' <- VERY IMPORTANT! 
   2. `gunzip -c ~/Downloads/mele_debian_armhf_minimal.cpio.gz | cpio -i`
   3. `cp -a ~/Olinuxino_Modules/lib/modules/3.0.32/ /mnt/SDCard/lib/modules/`
   4. `sync`
   5. `sudo umount /mnt/SDCard/`
   
 - Put the SDCard into the Olinuxino and boot it up
   1. the defualt user/pass is: root/password
   2. `useradd USERNAME`
   3. `addgroup xenomai`
   4. `sudo usermod -a -G xenomai USERNAME`
   5. `sudo usermod -a -G sudo USERNAME`
   6. `logout` and then login as USERNAME
   7. `id` make note of your gid! and make sure your a member of sudo & xenomai
   8. `cd /boot`
   9. `nano script.bin`
   10. append `xeno_nucleus.xenomai_gid=YYYY` to the kernel line
   11. Reboot the Olinuxino and hope it all works!

TROUBLESHOOTING & BUGS:

 - Please use GitHub's issues tracker when reporting a bug but this is ONLY for bugs, not questions!
 - For questions visit the Olimex forums. (https://www.olimex.com/forum/index.php?topic=812.0) specificly.
 
USEFULL DOCUMENTATION:
 
 [Olimex Wiki - Build bootable SDCard](https://www.olimex.com/wiki/Build_Bootable_SD_Card_with_Debian)
 [Olimex Forums](https://www.olimex.com/forum/index.php?topic=518.0)
 [Linux-SUNXI](http://linux-sunxi.org/Main_Page)
 [Xenomai Install Readme](http://www.xenomai.org/documentation/xenomai-2.6/html/README.INSTALL/)
 [Xenomai Quick Build](http://www.xenomai.org/index.php/Xenomai_quick_build_quide)
  
 [GitHub](http://www.GitHub.org)
 [Eclipse Juno](http://www.eclipse.org)
 [EGit - Git plugin for eclipse](http://www.eclipse.org/egit/)